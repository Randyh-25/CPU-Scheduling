<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simulasi CPU Scheduling</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>

  <h1>Simulasi CPU Scheduling</h1>
  <table>
    <thead>
      <tr>
        <th>Proses</th>
        <th>Arrival Time (ms)</th>
        <th>Burst Time (ms)</th>
        <th>Prioritas</th>
      </tr>
    </thead>
    <tbody>
      <tr><td>P1</td><td>0</td><td>10</td><td>3</td></tr>
      <tr><td>P2</td><td>2</td><td>5</td><td>1</td></tr>
      <tr><td>P3</td><td>4</td><td>8</td><td>4</td></tr>
      <tr><td>P4</td><td>6</td><td>3</td><td>2</td></tr>
      <tr><td>P5</td><td>8</td><td>6</td><td>5</td></tr>
    </tbody>
  </table>
  <div class="btn-container">
    <p>Pilih jenis simulasi:</p>
    <button onclick="startSimulation('fcfs')">First Come First Serve</button>
    <button onclick="startSimulation('sjf')">Shortest Job First</button>
  </div>

  <div id="simulation" class="hidden">
    <h2 id="judulSimulasi"></h2>

    <div class="label">Schedule Sebelum (urutan proses)</div>
    <div id="beforeSchedule" class="queue"></div>

    <div class="label">CPU Berjalan (animasi)</div>
    <div id="cpuAnimation" class="anim"></div>
  </div>

  <script>
    const processes = [
    { name: 'P1', arrival: 0, burst: 10, priority: 3 },
    { name: 'P2', arrival: 2, burst: 5, priority: 1 },
    { name: 'P3', arrival: 4, burst: 8, priority: 4 },
    { name: 'P4', arrival: 6, burst: 3, priority: 2 },
    { name: 'P5', arrival: 8, burst: 6, priority: 5 },
  ];

  function startSimulation(type) {
    const simDiv = document.getElementById('simulation');
    const beforeDiv = document.getElementById('beforeSchedule');
    const animDiv = document.getElementById('cpuAnimation');
    const title = document.getElementById('judulSimulasi');

    simDiv.classList.remove('hidden');
    beforeDiv.innerHTML = "";
    animDiv.innerHTML = "";

    let queue = [...processes];

    if (type === 'fcfs') {
      title.textContent = "Simulasi FCFS (Permisalan: Warnet)";
      queue.sort((a, b) => a.arrival - b.arrival);
    } else if (type === 'sjf') {
      title.textContent = "Simulasi SJF (Permisalan: Tukang Fotokopi)";
      queue.sort((a, b) => a.burst - b.burst);
    }

    // Tampilkan urutan awal
    queue.forEach(p => {
      const el = document.createElement('div');
      el.className = `process ${p.name}`;
      el.textContent = `${p.name} (${p.burst}ms)`;
      beforeDiv.appendChild(el);
    });

    // Animasikan dengan titik-titik
    let totalDelay = 0;

    queue.forEach((p) => {
      setTimeout(() => {
        const processContainer = document.createElement('div');
        processContainer.style.marginBottom = '20px';
        const label = document.createElement('div');
        label.textContent = `${p.name}:`;
        label.style.fontWeight = 'bold';
        label.style.marginBottom = '5px';

        const dotContainer = document.createElement('span');
        dotContainer.className = `process ${p.name}`;
        dotContainer.style.display = 'inline-block';

        processContainer.appendChild(label);
        processContainer.appendChild(dotContainer);
        animDiv.appendChild(processContainer);

        for (let j = 0; j < p.burst; j++) {
          setTimeout(() => {
            const dot = document.createElement('span');
            dot.textContent = ' ●';
            dot.className = 'dot';
            dot.style.opacity = '0';
            dotContainer.appendChild(dot);
            requestAnimationFrame(() => dot.style.opacity = '1');
          }, j * 300);
        }
      }, totalDelay);

      totalDelay += p.burst * 300 + 600; // durasi titik + jeda antar proses
    });
  }
  </script>

</body>
</html>
